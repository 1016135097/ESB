package com.perkinelmer.service.renji;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.sql.DataSource;

import org.slf4j.Logger;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.streambase.sb.*;
import com.streambase.sb.operator.*;

/**
 * Generated by JDT StreamBase Client Templates (Version: 7.6.7.1702081658).
 *
 * This class is used as a Java Operator in a StreamBase application.
 * One instance will be created for each Java Operator in a StreamBase 
 * application. 
 * <p>
 * Enqueue methods should only be called from processTuple.
 * <p>
 * If there is any state that the operator instance needs to maintain beyond the
 * lifetime of the instance, the setSessionState/getSessionState methods can
 * be used.
 * @see Parameterizable
 * @see Operator
 * For in-depth information on implementing a custom Java Operator, please see
 * "Developing StreamBase Java Operators" in the StreamBase documentation.
 */
public class getAttributes extends Operator implements Parameterizable {

	public static final long serialVersionUID = 1522227079708L;
	@SuppressWarnings("unused")
	private Logger logger;
	// Local variables
	private int inputPorts = 1;
	private int outputPorts = 1;
	private int nextOutputPort = 0;
	private Schema[] outputSchemas; // caches the Schemas given during init() for use at processTuple()

	/**
	 * The constructor is called when the Operator instance is created, but before the Operator 
	 * is connected to the StreamBase application. We recommended that you set the initial input
	 * port and output port count in the constructor by calling setPortHints(inPortCount, outPortCount).
	 * The default is 1 input port, 1 output port. The constructor may also set default values for 
	 * operator parameters. These values will be displayed in StreamBase Studio when a new instance
	 * of this operator is  dragged to the canvas, and serve as the default values for omitted
	 * optional parameters.
	 */
	public getAttributes() {
		super();
		logger = getLogger();
		setPortHints(inputPorts, outputPorts);
		setDisplayName(this.getClass().getSimpleName());
		setShortDisplayName(this.getClass().getSimpleName());

	}

	/**
	 * The typecheck method is called after the Operator instance is connected in the StreamBase
	 * application, allowing the Operator to validate its properties. The Operator class may 
	 * change the number of input or output ports by calling the requireInputPortCount(portCount)
	 * method or the setOutputSchema(schema, portNum) method. If the verifyInputPortCount method 
	 * is passed a different number of ports than the Operator currently has, a PortMismatchException
	 * (subtype of TypecheckException) is thrown.
	 */
	public void typecheck() throws TypecheckException {
		// typecheck: require a specific number of input ports
		requireInputPortCount(inputPorts);

		// TODO Ensure that all properties have valid values, and typecheck the input schemas here

		// you must specify a setOutputSchema for each port, so that StreamBase Studio
		// knows how many output ports to draw for the output ports. If you do not
		// use setOutputSchema for each port, the Java Operator on the StreamBase Studio
		// canvas will not display the correct number of output ports.
		for (int i = 0; i < outputPorts; ++i) {
			// TODO this example sets every output port Schema the same as the first input port; change this as needed
			setOutputSchema(i, getInputSchema(0));
		}

	}

	/**
	 * This method will be called by the StreamBase server for each Tuple given
	 * to the Operator to process. This is the only time an operator should 
	 * enqueue output Tuples.
	 * @param inputPort the input port that the tuple is from (ports are zero based)
	 * @param tuple the tuple from the given input port
	 * @throws StreamBaseException Terminates the application.
	 */
	public void processTuple(int inputPort, Tuple tuple)
			throws StreamBaseException {
		// TODO only the first input port is processed; see the template code for typecheck()
		if (inputPort > 0) {
			return;
		}

		// create a new output tuple from the Schema at the port we are about to send to
		Tuple out = outputSchemas[inputPort].createTuple();

		// TODO this template just copies each field value from input port 0 (the first input port)
		for (int i = 0; i < out.getSchema().getFieldCount(); ++i) {
			// note: best performance is achieved retrieving values through Tuple#getField(Schema.Field)
			out.setField(i, tuple.getField(i));
		}
		String username = "";
		String password = "";
		String methodName = "";
		String methodCode = "";
		try {
			String content = (tuple.getField("Data")==null?"":tuple.getString("Data"));
			String usernameREGEX = "<user>(.*)</user>[\\s\\n]*<password>(.*)</password>[\\s\\n]*<methodCode>(.*)</methodCode>[\\s\\n]*<methodName>(.*)</methodName>";
			Pattern p = Pattern.compile(usernameREGEX);
			Matcher m = p.matcher(content);
			if(m.find()){//ֻ��һ��ƥ��
				username=m.group(1);
				password=m.group(2);
				methodCode=m.group(3);
				methodName=m.group(4);
			}
//			QueryRunner qr = new QueryRunner(getDataSource());
//			@SuppressWarnings({ "unchecked", "rawtypes" })
//			String accountId=qr.query("select Id from WebServiceManager.dbo.Accounts where  Password='"+password+"'and SystemName='"+username+"'",new ScalarHandler());
//			if(accountId==null){
//				out.setString("checkAuthority", "false");
//				out.setString("checkAuthorityMsg","fail account! please try again!");
//			}else{
//				@SuppressWarnings({ "unchecked", "rawtypes" })
//				String serviceId=qr.query("select Id from WebServiceManager.dbo.Services where ServiceCode='"+methodCode+"' and ServiceName='"+methodName+"'", new ScalarHandler());
//				if(serviceId==null){
//					out.setString("checkAuthority", "false");
//					out.setString("checkAuthorityMsg","fail service! please try again!");
//				}else{
//					@SuppressWarnings({ "unchecked", "rawtypes" })
//					String subscriptionId = qr.query("select Id from WebServiceManager.dbo.SubScriptions where  Account_Id='"+accountId+"' and Service_Id='"+serviceId+"'", new ScalarHandler() );
//					if(subscriptionId==null){
//						out.setString("checkAuthority", "false");
//						out.setString("checkAuthorityMsg","fail subscription! please try again!");
//					}else{
//						out.setString("checkAuthority", "success");
//						out.setString("subscriptionId",subscriptionId);
//					}
//					
//				}
//			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// nextOutputPort is used to send tuples by round-robin on every output port by this template.
		out.setString("username", username);
		out.setString("password", password);
		out.setString("servicename", methodName);
		out.setString("servicecode", methodCode); 
		sendOutput(nextOutputPort, out);
		nextOutputPort = (nextOutputPort + 1) % outputPorts;
	}

	/**
	 * If typecheck succeeds, the init method is called before the StreamBase application
	 * is started. Note that your Operator class is not required to define the init method,
	 * unless (for example) you need to perform initialization of a resource such as a JDBC
	 * pool, if your operator is making JDBC calls. StreamBase Studio does not call this
	 * during authoring.
	 */
	public void init() throws StreamBaseException {
		super.init();
		// for best performance, consider caching input or output Schema.Field objects for
		// use later in processTuple()
		outputSchemas = new Schema[outputPorts];

		for (int i = 0; i < outputPorts; ++i) {
			outputSchemas[i] = getRuntimeOutputSchema(i);
		}
	}

	/**
	 *  The shutdown method is called when the StreamBase server is in the process of shutting down.
	 */
	public void shutdown() {

	}


    public static DataSource getDataSource() throws Exception {
    	ComboPooledDataSource ds = new ComboPooledDataSource();
    	ds.setJdbcUrl("jdbc:sqlserver://192.168.56.101:1433/StreamBase_DB?useUnicode=true&amp;characterEncoding=UTF-8");
    	ds.setDriverClass("com.microsoft.jdbc.sqlserver.SQLServerDriver");
    	ds.setUser("sa");
    	ds.setPassword("!@34QWer");
    	ds.setInitialPoolSize(3);
    	ds.setMaxPoolSize(6);
    	ds.setMaxIdleTime(1000);
        return ds;
    }
}
